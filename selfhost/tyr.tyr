enum TokenKind {
    IntLiteral(u32),
    Plus,
    Minus,
    Star,
    Slash,
    OpenParen,
    CloseParen,
}

record Token {
    kind: TokenKind
}

function is_numeric(c: char): bool {
    return c >= 48 and c <= 57;
}

function parse_i32(c: char): i32 {
    if not c.is_numeric() {
        return -1;
    }
    return (c - 48) as i32;
}

function lex(f: File): [dynamic]Token {

    var tokens = [dynamic]Token{};

    var c = f.read_char();
    var i = 0;
    while -1 != c {

        if c == '+' {
            tokens.push(Token { TokenKind::Plus, 0 } );
        } else if c == '-' {
            tokens.push(Token { TokenKind::Minus, 0 } );
        } else if c == '*' {
            tokens.push(Token { TokenKind::Star, 0 } );
        } else if c == '/' {
            tokens.push(Token { TokenKind::Slash, 0 } );
        } else if c == '(' {
            tokens.push(Token { TokenKind::OpenParen, 0 } );
        } else if c == ')' {
            tokens.push(Token { TokenKind::CloseParen, 0 } );
        } else if c.is_numeric() {
            var n = c.parse_i32();
            c = f.read_char();

            while c.is_numeric() {
                n = n * 10;
                n = n + c.parse_i32();
                c = f.read_char();
            }
            tokens.push(Token { TokenKind::IntLiteral, n } );
            continue;
        } else if c == ' ' {
            c = f.read_char();
            continue;
        }

        c = f.read_char();
        i = i + 1;
    }

    return tokens;
}

enum BinaryOp {
    Add,
    Sub,
    Mul,
    Div,
}

function print_binop(binop: BinaryOp) {
    switch binop {
        case BinaryOp::Add(): print("+"),
        case BinaryOp::Sub(): print("-"),
        case BinaryOp::Mul(): print("*"),
        case BinaryOp::Div(): print("/"),
    }
}

enum Expression {
    IntLiteral(u32),
    Parenthesised(Expression),
    Binary(Expression, BinaryOp, Expression),
}

function print_expression(e: Expression) {
    switch e {
        case Expression::IntLiteral(i): print(i),
        case Expression::Parenthesised(expr): {
            print("(");
            expr.print_expression();
            print(")");
        },
        case Expression::Binary(left, op, right): {
            left.print_expression();
            op.print_binop();
            right.print_expression();
        },
    }
}

function main(args: []string) {

    var expr = Expression::Binary(
        Expression::Parenthesised(
            Expression::Binary(
                Expression::IntLiteral(5),
                BinaryOp::Add,
                Expression::IntLiteral(6)
            )
        ),
        BinaryOp::Mul,
        Expression::IntLiteral(10)
    );

    expr.print_expression();
}